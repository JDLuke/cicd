name: Read Configuration File

on:
  workflow_call:
    outputs:
      json-config:
        description: Configuration for build (from config.yml)
        value: ${{ jobs.read-config.outputs.json-config }}
        
jobs:
  read-config:
    runs-on: ubuntu-latest
    outputs:
      json-config: ${{ steps.env.outputs.json-config }}
      java-version: ${{ steps.default-config.outputs.java_version }}

    steps:
      - name: Restore repository cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ runner.os }}-repo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-repo-${{ github.sha }}

      - name: Get project name
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "Project name: $REPO_NAME"
          echo "PROJECT_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Install yaml library
        run: npm install js-yaml

      - uses: actions/checkout@v4
        name: Obtain default pipeline configuration
        with:
          repository: JDluke/cicd
          path: cicd-project
          fetch-depth: 1
          sparse-checkout: 'default_config.yml'

      - name: Read combined configurations
        id: project-config
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            var config = {};
            var defaultConfig = {};
            
            const gitDefaultConfig = { "PROJECT_NAME": process.env.PROJECT_NAME };
            
            try {
              defaultConfig = yaml.load(fs.readFileSync('cicd-project/default_config.yml', 'utf8'));
              console.log("Default configuration file loaded successfully:");
              console.log(defaultConfig);
            } catch (error) {
              console.error(error);
            }
            
            try {
              config = yaml.load(fs.readFileSync('config.yml', 'utf8'));
              console.log("Project configuration file loaded successfully:");
              console.log(config);
            } catch (error) {
              console.error(error);
            }
            
            const jsonConfig = JSON.stringify({ ...gitDefaultConfig, ...defaultConfig, ...config });
            console.log(jsonConfig);
            return jsonConfig;

      - name: Setup Environment
        id: env
        run: |
          echo Final environment: ${{ steps.project-config.outputs.result }} 
          echo json-config=${{ steps.project-config.outputs.result }} >> $GITHUB_OUTPUT
